#!/usr/bin/python

# Author: Bengi Mizrahi
# Date: 05.06.2012

import sys
import imp
import os
import re
import shutil
import string
import datetime
import inspect
import subprocess
import select

COLORS = { "blue": "\033[1;34m", "default": "\x1B[m", "yellow": "\033[1;33m",
    "magenda": "\033[1;31m", "white": "\033[1;37m", "green": "\033[1;32m",
    "red": "\033[1;31m",
}
NOCOLORS = dict(map(lambda c: (c, ""), COLORS.iterkeys()))

class Observer(object):
    enabled = True
    def onEvent(self, target, event, *args, **kwargs):
        assert False, "%s.onEvent() is not implemented." % (
            self.__class__.__name__)

def notifyObservers(target, event, *args, **kwargs):
    map(lambda o: o.onEvent(target, event, *args, **kwargs), observers)

def runShellCommand(cmd, **kwargs):
    if kwargs.get("verbose"):
        print "%s%s%s" % (COLORS["white"], " ".join(cmd), COLORS["default"])
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
    eof = {p.stdout: False, p.stderr: False}
    try:
        while not all(eof.values()):
            for fd in select.select([p.stdout, p.stderr], [], [])[0]:
                line = fd.readline().strip()
                if not line:
                    eof[fd] = True
                    continue
                if ": warning: " in line:
                    print "%s%s%s" % (COLORS["yellow"], line, COLORS["default"])
                elif ": error: " in line:
                    print "%s%s%s" % (COLORS["red"], line, COLORS["default"])
                else:
                    print line
    except KeyboardInterrupt:
        print
        exit(1)
    p.communicate()
    return p.returncode

class File:
    def __init__(self, filePath):
        self.basename = os.path.basename(filePath)
        self.canonical, self.extension = os.path.splitext(self.basename)
        self.directory = os.path.dirname(filePath)
    @property
    def dependFilePath(self):
        return os.path.join(self.directory, "%s.d" % self.canonical)
    @property
    def objectFilePath(self):
        return os.path.join(self.directory, "%s.o" % self.canonical)
    @property
    def sourceFilePath(self):
        return os.path.join(self.directory, "%s%s" % (
            self.canonical, self.extension))
    def __repr__(self):
        return "%s/%s%s" % (self.directory, self.canonical,
            self.extension)

def scanSourceFiles(module, extensions):
    results = []
    query = None
    sourceFiles = None
    if module.get("sourcefilter"):
        query = module["sourcefilter"].replace("?", "absf")
    if module.get("sourcefiles"):
        sourceFiles = module["sourcefiles"]
    for rootdir, subdirs, files in os.walk(module["directory"]):
        for f in files:
            absf = os.path.join(rootdir, f)
            if query and not eval(query):
                continue
            if sourceFiles and not any(map(lambda f: f in absf,
                    sourceFiles)):
                continue
            if os.path.splitext(f)[-1] in extensions:
                results.append(File(absf))
    return results

def createObjectFile(sourceFile, objectFilePath):
    cmd = [compiler[sourceFile.extension]]
    cmd.extend(activeConfiguration["flags"])
    cmd.extend(module["defines"])
    cmd.extend(["-I."] + ["-I%s" % i for i in 
            [os.path.join(
                module["directory"],
                module.get("includedir", ".")
            )] + module["incpaths"]])
    cmd.extend(["-c", sourceFile.sourceFilePath])
    cmd.extend(["-o", objectFilePath])
    print "%sCompile:%s %s%s%s" % (
        COLORS["blue"], COLORS["default"],
        COLORS["yellow"], sourceFile.sourceFilePath, COLORS["default"])
    if not os.path.exists(os.path.join(acBuildDirectory, sourceFile.directory)):
        os.makedirs(os.path.join(acBuildDirectory, sourceFile.directory))
    rt = runShellCommand(cmd, verbose=True)
    if rt:
        print "%sError:%spmake exited with error code %d" % (
            COLORS["red"], COLORS["default"], rt)
        notifyObservers(target, "didFinish", error=True)
        exit(rt)

def createDependencyFile(sourceFile, dependFilePath):
    cmd = [compiler[sourceFile.extension], "-MM"]
    cmd.extend(activeConfiguration["flags"])
    cmd.extend(module["defines"])
    cmd.extend(["-I%s" % i for i in 
            [os.path.join(
                module["directory"],
                module.get("includedir", ".")
            )] + module["incpaths"]])
    cmd.extend([sourceFile.sourceFilePath, "-o", dependFilePath])
    rt = runShellCommand(cmd)
    if rt:
        print "%sError:%spmake exited with error code %d" % (
            COLORS["red"], COLORS["default"], rt)
        notifyObservers(target, "didFinish", error=True)
        exit(rt)

def modifyTime(filename):
    return os.path.getmtime(filename)

def anyDirtyFileInDependencyFile(sourceFile, dependFilePath):
    try:
        with file(dependFilePath) as depend:
            trans = string.maketrans('\\\n', '  ')
            t1, _, t2 = (t.strip() for t in
                depend.read().translate(trans).strip().partition(
                    ":"))
            obj, deps = os.path.join(acBuildDirectory,
                sourceFile.directory, t1), t2.split()
            dirtyFiles = set(filter(
                lambda d: modifyTime(d) > modifyTime(obj), deps))
            if dirtyFiles:
                print "%sDep: %s%s%s%s -> %s" % (
                    COLORS["blue"], COLORS["default"],
                    COLORS["yellow"], obj, COLORS["default"],
                     ", ".join(dirtyFiles))
            return bool(dirtyFiles)
    except IOError:
        print "File %s not found" % sourceFile.dependFilePath
        return True

def moduleTarget_all(name, module):
    notifyObservers(target, "willBuildModule", name, module)

    # Setup default module parameters
    if not module.get("directory"):
        module["directory"] = name
    if not module.get("incpaths"):
        module["incpaths"] = []
    if not module.get("defines"):
        module["defines"] = []

    # If extbuildcmd exists, build with the external tool
    if module.get("extbuildcmd"):
        print "%s%s%s" % (COLORS["yellow"], module["extbuildcmd"],
            COLORS["default"])
        os.chdir(module["directory"])
        rt = runShellCommand(module["extbuildcmd"].split())
        if rt:
            print "%sError:%spmake exited with error code %d" % (
                COLORS["red"], COLORS["default"], rt)
            notifyObservers(target, "didFinish", error=True)
            exit(rt)
        os.chdir(projectRootDirectory)
        return

    # Create module build directory
    moduleBuildDirectory = os.path.join(acBuildDirectory,
        module["directory"])
    if not os.path.exists(moduleBuildDirectory):
        os.makedirs(moduleBuildDirectory)

    # List all source files
    extensions = reduce(lambda a, b: a + b, COMPILER.values())
    sourceFiles = scanSourceFiles(module, extensions)

    # Compile each source file
    (NO_OBJECT_FILE_FOUND,
     DEPENDENCIES_ARE_RECENT_THAN_OBJECT_FILE,
     OBJECT_FILE_IS_THE_MOST_RECENT) = range(3)
    atLeastOneObjectFileCreated = False
    for sourceFile in sourceFiles:
        sourceFilePath = sourceFile.sourceFilePath
        objectFilePath = os.path.join(acBuildDirectory,
            sourceFile.objectFilePath)
        dependFilePath = os.path.join(acBuildDirectory,
            sourceFile.dependFilePath)
        sourceDirectory = sourceFile.directory
        sourceExtension = sourceFile.extension
        if not os.path.exists(objectFilePath):
            condition = NO_OBJECT_FILE_FOUND
        elif anyDirtyFileInDependencyFile(sourceFile, dependFilePath):
            condition = DEPENDENCIES_ARE_RECENT_THAN_OBJECT_FILE
        else:
            condition = OBJECT_FILE_IS_THE_MOST_RECENT
        if condition != OBJECT_FILE_IS_THE_MOST_RECENT:

            notifyObservers(target, "willCompileSourceFile",
                name, module, sourceFile)

            createObjectFile(sourceFile, objectFilePath)
            atLeastOneObjectFileCreated = True
            createDependencyFile(sourceFile, dependFilePath)

            notifyObservers(target, "didCompileSourceFile",
                name, module, sourceFile)

    notifyObservers(target, "willArchive",
        name, module)

    # Create library for the module
    moduleObjectFiles = map(lambda s: os.path.join(
        acBuildDirectory, s.objectFilePath), sourceFiles)
    libFilePath = os.path.join(acBuildDirectory,
        MODULES[name]["directory"],
        "lib%s.a" % name)
    archiveFiles.append(libFilePath)
    if not os.path.exists(libFilePath) or any(
            map(lambda o: modifyTime(libFilePath) < modifyTime(o),
                moduleObjectFiles)):
        print "%sArchive:%s %s%s%s" % (
            COLORS["magenda"], COLORS["default"],
            COLORS["yellow"], libFilePath, COLORS["default"])
        cmd = [AR, "cr", libFilePath]
        cmd.extend(moduleObjectFiles)
        rt = runShellCommand(cmd, verbose=True)
        if rt:
            print "%sError:pmake exited with error code %d%s" % (
                COLORS["red"], rt, COLORS["default"])
            notifyObservers(target, "didFinish", error=True)
            exit(rt)
        atLeastOneArchiveFileCreated = True

    notifyObservers(target, "didBuildModule", name, module)

def moduleTarget_clean(name, module):
    notifyObservers(target, "willCleanModule", name, module)
    print "%sClean %s/%s%s" % (COLORS["blue"], acBuildDirectory,
        name, COLORS["default"])
    if module.get("extcleancmd"):
        if module.get("directory"):
            os.chdir(module["directory"])
        else:
            os.chdir(name)
        runShellCommand(module["extcleancmd"].split())
        os.chdir(projectRootDirectory)
    notifyObservers(target, "didCleanModule", name, module)

def appTarget_all():
    if not "APPLICATION_NAME" in globals():
        notifyObservers(target, "willLink", error=False)
        exit(0)
    targetFilePath = os.path.join(acBuildDirectory,
        APPLICATION_NAME)
    if not os.path.exists(targetFilePath) or \
            atLeastOneArchiveFileCreated or \
            any(map(lambda a: modifyTime(targetFilePath) < modifyTime(a),
            archiveFiles)):
        print "%sLink:%s %s%s%s" % (COLORS["green"], COLORS["default"],
            COLORS["yellow"], targetFilePath, COLORS["default"])
        allLibraryPaths = LIBRARY_PATHS + map(
            lambda n: os.path.join(acBuildDirectory,
            MODULES[n]["directory"]), ACTIVE_MODULES)
        activeModuleLibraries = ACTIVE_MODULES[:]
        map(lambda n: activeModuleLibraries.remove(n),
            filter(lambda n: activeModules[n].get("extbuildcmd") is not None,
            activeModules.keys()))
        allLibraries = LIBRARIES + activeModuleLibraries 
        cmd = [LINKER]
        cmd.extend(LDFLAGS)
        cmd.extend(["-L%s" % d for d in allLibraryPaths])
        cmd.extend(["-l%s" % l for l in allLibraries])
        cmd.extend(["-o", targetFilePath])
        rt = runShellCommand(cmd, verbose=True)
        if rt:
            print "%sError:%spmake exited with error code %d" % (
                COLORS["red"], COLORS["default"], rt)
            notifyObservers(target, "didFinish", error=True)
            exit(rt)
        shutil.copy(targetFilePath, APPLICATION_NAME)

    notifyObservers(target, "didFinish", error=False)

def appTarget_clean():
    print "%sClean %s/%s" % (COLORS["blue"], acBuildDirectory,
        COLORS["default"])
    try:
        shutil.rmtree(acBuildDirectory)
    except OSError, e:
        print e
        pass

if __name__ == "__main__":

    # Get current date/time
    now = datetime.datetime.now()

    # Get project root directory
    projectRootDirectory = os.getcwd()

    # Get the target
    target = "all"
    if len(sys.argv) == 2:
        target = sys.argv[1]

    # Import makefile.py
    try:
        with file("Makefile.py") as f:
            exec(f.read())
    except IOError:
        print "Error: No such file: Makefile.py"
        exit(1)
    
    # Determine if colorful output is desired
    if not COLOR:
        COLORS = NOCOLORS

    # Process COMPILER
    compiler = {}
    for cmpl, exts in COMPILER.iteritems():
        for ext in exts:
            compiler[ext] = cmpl 

    # If BUILD_DIR does not exist, create it.
    if not os.path.exists(BUILD_DIR):
        os.makedirs(BUILD_DIR)

    # Check if desired configuration exists
    activeConfiguration = CONFIGURATIONS.get(ACTIVE_CONFIGURATION)
    if not activeConfiguration:
        print "Error: ACTIVE_CONFIGURATION(%s) not found in CONFIGURATIONS(%s)" % (
            activeConfiguration,
            ", ".join(CONFIGURATIONS.keys()))
        exit(1)

    # Check if desired configuration is valid
    requiredConfigurationParameters = ["buildsubdir"]
    if any(map(lambda p: activeConfiguration.get(p) is None,
            requiredConfigurationParameters)):
        print "Error: One or more required parameters are missing. The " \
              "following parameters are required: %s." % \
              ", ".join(requiredConfigurationParameters)
        exit(1)

    # Get the active configuration build sub directory
    acBuildDirectory = os.path.join(BUILD_DIR,
        activeConfiguration["buildsubdir"])

    # Create the active configuration build sub directory
    if not os.path.exists(acBuildDirectory):
        os.makedirs(acBuildDirectory)

    # Check if desired modules exists
    notFound = filter(lambda m: not m in MODULES.keys(), ACTIVE_MODULES)
    if notFound:
        print "Error: No module(s) named %s found in MODULES." % notFound 
        exit(1)
    activeModules = dict(filter(lambda m: m[0] in ACTIVE_MODULES,
        MODULES.iteritems()))

    # Get Observer subclasses
    allObservers = filter(lambda oc: inspect.isclass(oc) and
        issubclass(oc, Observer) and oc.enabled, globals().values())
    validObservers = allObservers.remove(Observer)
    observers = map(lambda oc: oc(), allObservers)

    # Notify observers with event 'willStart'
    notifyObservers(target, "willStart")

    # Setup moduleTarget & appTarget functions
    moduleTarget = globals().get("moduleTarget_" + target)
    appTarget = globals().get("appTarget_" + target)
    if not appTarget or not moduleTarget:
        print "Error: Unknown target '%s'" % target
        exit(1)

    # Apply target to each active module
    archiveFiles = list()
    atLeastOneArchiveFileCreated = False
    for name, module in activeModules.iteritems():
        moduleTarget(name, module)


    # Link all object files
    appTarget()
