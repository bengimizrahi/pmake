#!/usr/bin/python

import subprocess, select

DEFAULT_COMPILER = "gcc"
DEFAULT_ARCHIVER = "ar"
DEFAULT_LINKER = "gcc"

rules = {}

class Rule(object):
    def __init__(self, target, prerequisites, recipe):
        self.target = target
        if type(prerequisites) == str:
            self.prerequisites = [prerequisites]
        elif type(prerequisites) == list:
            self.prerequisites = prerequisites
        elif callable(prerequisites):
            self.prerequisites = prerequisites(target)
        self.recipe = recipe
    def __repr__(self):
        return "Rule(%s -> %s (%s))" % (self.target, self.prerequisites,
            self.recipe.__name__)
    def do(self):
        return False

def rule(targets, prerequisites=None, **kwargs):
    assert type(targets) in [str, list], \
        "'targets' can only be a 'str' or 'list' object."
    assert type(prerequisites) in [None, str] or \
            callable(prerequisites), \
        "'prerequisites' can only be a 'None', 'str' or a callable."
    def ruleDecorator(recipeFunc):
        if type(targets) == str: targets = [targets] 
        for t in targets:
            r = Rule(t, prerequisites, recipeFunc)
            rules[t] = r
        return lambda target: None
    return ruleDecorator

def validate(require, defaults):
    def validateDecorator(f):
        def newf(**kwargs):
            missingRequiredArgs = filter(
                lambda r: not r in kwargs, require)
            if missingRequiredArgs:
                print "Error: function %s requires: %s" % \
                    ", ".join(missingRequiredArgs)
                return False
            missingOptionalArgs = filter(
                lambda o: not o in kwargs, defaults)
            for o in missingOptionalArgs:
                kwargs[o] = defaults[o]
            return f(**kwargs)
        return newf
    return validateDecorator

def runShellCommand(cmd, **kwargs):
    if kwargs.get("verbose"):
        print "%(white)%()s%(default)s" % COLORS % " ".join(cmd)
    process = subprocess.Popen(cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
    eof = {process.stdout: False, process.stderr: False}
    while not all(eof.values()):
        for fd in select.select(list(eof), [], [])[0]:
            line = fd.readline().strip()
            if not line:
                eof[fd] = True
                continue
            if ": warning: " in line:
                print "%(yellow)s%()s%(default)s" % COLORS % line
            elif any((s in line for s in
                    [": error: ", ": fatal error:"])):
                print "%(red)s%()s%(default)s" % COLORS % line
            else:
                print line
    process.communicate()
    return process.returncode and True or False

@validate(
    require=["depend", "source"],
    defaults={
        "compiler": DEFAULT_COMPILER,
        "includePaths": [],
        "defines": [],
    })
def getDependList(**kwargs):
    compiler = kwargs["compiler"]
    includePaths = kwargs["includePaths"]
    dependFile = kwargs["depend"]
    if not "-I." in includePaths:
        includePaths.append("-I.")
    defines = kwargs["defines"]
    sourceFile = kwargs["source"]
    cmd = [compiler, "-MM"] + includePaths + \
        defines + [sourceFile] + ["-o", dependFile]
    return runShellCommand(cmd, verbose=False)

@validate(
    require=["object", "source"],
    defaults={
        "compiler": DEFAULT_COMPILER,
        "includePaths": [],
        "defines": [],
    })
def compilee(**kwargs):
    compiler = kwargs["compiler"]
    includePaths = kwargs["includePaths"]
    if not "-I." in includePaths:
        includePaths.append("-I.")
    defines = kwargs["defines"]
    objectFile = kwargs["object"]
    sourceFile = kwargs["source"]
    cmd = [compiler] + includePaths + \
        defines + ["-c", sourceFile] + ["-o", objectFile]
    return runShellCommand(cmd, verbose=True)

@validate(
    require=["archive", "objects"],
    defaults={
        "linker": DEFAULT_LINKER,
    })
def link(**kwargs):
    linker = kwargs["linker"]
    archiveFile = kwargs["archive"]
    objectFiles = kwargs["objects"]
    cmd = [linker, "cr", archiveFile] + objectFiles
    return runShellCommand(cmd, verbose=True)
