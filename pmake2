#!/usr/bin/python

def rule(targets, prerequisites=None, **kwargs):
    assert type(targets) in [str, list],
        "'targets' can only be a 'str' or 'list' object."
    assert type(prerequisites) in [None, str] or \
            callable(prerequisites):
        "'prerequisites' can only be a 'None', 'str' or a callable."
    def ruleDecorator(recipeFunc):
        def decoratedRecipeFunc:
            # TODO: Do it! :)
        return decoratedRecipeFunc
    return ruleDecorator


APPLICATION_NAME = "fap"
BUILD_DIR = "Build"

# Rules for building

@rule("all", APPLICATION_NAME):
def makeAll(target):
    pass

@rule(APPLICATION_NAME, MODULES.keys()):
def makeApp(target):
    pass

@rule(MODULES.keys(), getObjectsByModule):
def makeModule(target):
    pass

@rule(getAllObjects(), getSourceByObject):
def makeObject(target):
    pass

@rule(getAllSources()):
def makeCompile(target):
    pass


# Rules for cleaning

@rule("clean", "clean_" + APPLICATION_NAME):
def makeClean(target):
    pass

@rule("clean_" + APPLICATION_NAME, ["clean_" + m for m in MODULE.keys()]):
def makeCleanApp(target):
    pass

@rule(["clean_" + m for m in MODULE.keys()]):
def makeCleanModule(target):
    pass
